The Nature of Code
==================

Chapter 6.  Steering
--------------------

=== 6.1  Forces from Within

The term *_autonomous agent_* generally refers to an entity that makes its own choices about how to act in its environment without any influence from a leader or global plan.  For us, “acting” will mean moving.   This addition is a significant conceptual leap.  Instead of a box sitting on a boundary waiting to be pushed by another falling box, we are now going to design a box that has the ability and “desire” to leap out of the way of that other falling box, if it so chooses.   While the concept of forces that come from within is a major shift in our design thinking, our code base will barely change, as these desires and actions are simply that—_forces_. 

This is a subtle change, but incredibly important for us: it allows us to alter the strength of these forces in one place. 

Here are three key components of autonomous agents that we’ll want to keep in mind as we build our examples.

- *An autonomous agent has a _limited_ ability to perceive environment.*   It makes sense that a living, breathing being should have an awareness of its environment.  What does this mean for us, however?   As we look at examples in this chapter, we will point out programming techniques for allowing objects to store references to other objects and therefore “perceive” their environment.    It’s also crucial that we consider the word _limited_ here.  Are we designing an all-knowing rectangle that flies around a Processing window, aware of everything else in that window?  Or are we creating a shape that can only examine any other object within fifteen pixels of itself?   Of course, there is no right answer to this question; it all depends.  We’ll explore some possibilities as we move forward.  For a simulation to feel more “natural,” however, limitations are a good thing.  An insect, for example, may only be aware of the sights and smells that immediately surround it.   For a real-world creature, we could study the exact science of these limitations.Luckily for us, we can just make stuff up and try it out.

image::imgs/chapter06/ch06_ex8.png[canvas="processingjs/chapter06/_6_08_SeparationAndSeek/_6_08_SeparationAndSeek.pde processingjs/chapter06/_6_08_SeparationAndSeek/Vehicle.pde",classname="screenshot"]

[example]*Example 6.8: Combining steering behaviors: Seek and separate* 

[source,java]
----
void applyBehaviors(ArrayList<Vehicle> vehicles) {
  // Accumulate new forces
  PVector separate = separate(vehicles);

  // These values can be whatever you want them to be!
  // They can be variables that are customized for each vehicle, or they can change over time.
  separate.mult(1.5); //[bold]

  // Apply the forces
  applyForce(separate);
}
----