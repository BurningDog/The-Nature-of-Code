
[source,java]
----
// <b><span style="font-size: 110%; text-decoration:underline;">Variables we need for our GA</b></span>

// Mutation rate
float mutationRate;           
// Population Total
int totalPopulation = 150;

// Population array
DNA[] population;         
// Mating pool ArrayList
ArrayList<DNA> matingPool;
// Target phrase
String target;

void setup() {
  size(200, 200);

  // Initializing target phrase and mutation rate
  target = "To be or not to be.";
  mutationRate = 0.01;

  // <b><span style="font-size: 110%; text-decoration:underline;">Step 1: Initialize Population</b></span>
  population = new DNA[totalPopulation];
  for (int i = 0; i < population.length; i++) {
    population[i] = new DNA();
  }
}

void draw() {

  // <b><span style="font-size: 110%; text-decoration:underline;">Step 2: Selection</b></span>

  // Step 2a: Calculate fitness.
  for (int i = 0; i < population.length; i++) {
    population[i].fitness();
  }

  // Step 2b: Build mating pool.
  ArrayList<DNA> matingPool = new ArrayList<DNA>();
  
  for (int i = 0; i < population.length; i++) { 
    // Add each member n times according to its fitness score.
    int n = int(population[i].fitness * 100);
    for (int j = 0; j < n; j++) {
      matingPool.add(population[i]);
    }
  }

  // <b><span style="font-size: 110%; text-decoration:underline;">Step 3: Reproduction</b></span>
  for (int i = 0; i < population.length; i++) {
    int a = int(random(matingPool.size()));
    int b = int(random(matingPool.size()));
    DNA partnerA = matingPool.get(a);
    DNA partnerB = matingPool.get(b);
    // Step 3a: Crossover
    DNA child = partnerA.crossover(partnerB);
    // Step 3b: Mutation
    child.mutate(mutationRate);

    // Note we are overwriting the population with the new
    // children.  When draw() loops, we will perform all the same 
    // steps with the new population of children.
    population[i] = child;
  }
}
----


[source,java]
----
PVector locationAfterSomethingHappened = new PVector(4.0, 8.9, 1.1);
----

[source,java]
----
    int x = 0;
    // Now here is a really long comment about nothing that goes forever
    // and ever and ever.
    int y = 7;
    // Now here is a really long comment about nothing that goes forever
    // and ever and ever.  in a world of forces and gave those objects desires, autonomy, and the ability to take action according to a system of rules.  Next, we allowed those objects to live in a population and evolve over time.  Now we ask: What is each objectâ€™s decision-making pr
----