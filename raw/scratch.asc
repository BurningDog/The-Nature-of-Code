The Nature of Code
==================


include::chapters/mathsvgfiles.asc[]


[NOTE]
.Dealing with formulae
=====================================================================
OK, in a moment we’re going to write out the formula for friction.  This isn’t the first time we’ve seen a formula in this book; we just finished up our discussion of Newton’s second law, {newton2a} (or force = mass * acceleration).    We didn’t spend a lot of time worrying about this formula because it’s a nice and simple one.  Nevertheless, it’s a scary world out there.  Just take a look at the equation for a “normal” distribution, which we covered (without looking at the formula) in the <<intro_section4, Introduction>>.

{normal}

((("friction","formula for")))

What we’re seeing here is that formulas like to use a lot of symbols (quite often letters from the Greek alphabet).   Let’s take a look at the formula for friction.

{friction1}

If it’s been a while since you’ve looked at a formula from a math or physics textbook, there are three key points that are important to cover before we move on.

- *_Evaluate the right side, assign to the left side._*  This is just like in code!  What we’re doing here is evaluating the right side of the equation and assigning it to the left.  In the case above, we want to calculate the force of friction—the left side tells us what we want to calculate and the right side tells us how to do it.
- *_Are we talking about a vector or a scalar?_*  It’s important for us to realize that in some cases, we’ll be looking at a vector; in others, a scalar.   For example, in this case the force of friction is a vector.  We can see that by the arrow above the word “friction.” It has a magnitude and direction.  The right side of the equation also has a vector, as indicated by the symbol {unitv}, which in this case stands for the velocity unit vector.
- *_When symbols are placed next to each other, we mean for them to be multiplied._*  The formula above actually has four elements:  -1, _μ_, _N_, and {unitv}.  We want to multiply them together and read the formula as: {friction2}
=====================================================================


Friction also occurs when a body passes through a liquid or gas.  This force has many different names, all really meaning the same thing: _viscous force_, _drag force_, _fluid resistance_.  While the result is ultimately the same as our previous friction examples (the object slows down), the way in which we calculate a drag force will be slightly different.  Let’s look at the formula:

{drag1}

Now let’s break this down and see what we really need for an effective simulation in Processing, making ourselves a much simpler formula in the process.

- {Fd} refers to _drag force_, the vector we ultimately want to compute and pass into our [function]*applyForce()* function.
- - 1/2 is a constant: -0.5.   This is fairly irrelevant in terms of our Processing world, as we will be making up values for other constants anyway.   However, the fact that it is negative is important, as it tells us that the force is in the opposite direction of velocity (just as with friction).

((("ρ (rho)")))
((("friction","ρ (rho)")))

- {rho} is the Greek letter _rho_, and refers to the density of the liquid, something we don’t need to worry about.  We can simplify the problem and consider this to have a constant value of 1.
- {v} refers to the speed of the object moving.  OK, we’ve got this one!  The object’s speed is the magnitude of the velocity vector:  [function]*velocity.magnitude()*.  And {v2} just means {v} squared or {v} * {v}.
- {A} refers to the frontal area of the object that is pushing through the liquid (or gas).  An aerodynamic Lamborghini, for example, will experience less air resistance than a boxy Volvo.   Nevertheless, for a basic simulation, we can consider our object to be spherical and ignore this element.
- {Cd} is the coefficient of drag, exactly the same as the coefficient of friction ({rho}).  This is a constant we’ll determine based on whether we want the drag force to be strong or weak.
- {unitv} Look familiar?  It should.  This refers to the velocity unit vector, i.e. [function]*velocity.normalize()*.  Just like with friction, drag is a force that points in the opposite direction of velocity.

Now that we’ve analyzed each of these components and determined what we need for a simple simulation, we can reduce our formula to:

