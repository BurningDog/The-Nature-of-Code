09_ga.asc
-------------------------------
------------------------------ORIGINAL------------------------------770
There are a couple of problems here.  First, we are adding elements to the mating pool N numbers of times, where N equals fitness multiplied by one hundred.  Objects can only be added to an [klass]*ArrayList* a whole number of times, and so A and B will both be added 80 times, giving them an equal probability of being selected.  Even with an improved solution that takes floating point probabilities into account, 80.1% is only a teeny tiny bit higher than 80%.  But getting 801 characters right is a whole lot better than 800 in the evolutionary scenario.  We really want to make that additional character count.   We want the fitness score for 801 characters to be  exponentially better than the score for 800.
------------------------------CHANGED-------------------------------
There are a couple of problems here.  First, we are adding elements to the mating pool N numbers of times, where N equals fitness multiplied by one hundred.  Objects can only be added to an [klass]*ArrayList* a whole number of times, and so A and B will both be added 80 times, giving them an equal probability of being selected.  Even with an improved solution that takes [var]*float*ing point probabilities into account, 80.1% is only a teeny tiny bit higher than 80%.  But getting 801 characters right is a whole lot better than 800 in the evolutionary scenario.  We really want to make that additional character count.   We want the fitness score for 801 characters to be  exponentially better than the score for 800.
------------------------------------------------------------------

------------------------------ORIGINAL------------------------------865
All we need to do to evolve those parameters is to turn them into an array, so that the array can be used with all of the functions—[function]*crossover()*, [function]*mutate()*, etc.—found in the [klass]*DNA* class.  One common solution is to use an array of floating point numbers between 0 and 1.
------------------------------CHANGED-------------------------------
All we need to do to evolve those parameters is to turn them into an array, so that the array can be used with all of the functions—[function]*crossover()*, [function]*mutate()*, etc.—found in the [klass]*DNA* class.  One common solution is to use an array of [var]*float*ing point numbers between 0 and 1.
------------------------------------------------------------------

------------------------------ORIGINAL------------------------------944
What’s great about this technique of dividing the genotype and phenotype into separate classes ([klass]*DNA* and [klass]*Rocket* for example) is that when it comes time to build all of the code, you’ll notice that the DNA class we developed earlier remains intact.   The only thing that changes is the array’s data type (float, [klass]*PVector*, etc.) and the expression of that data in the phenotype class.   
------------------------------CHANGED-------------------------------
What’s great about this technique of dividing the genotype and phenotype into separate classes ([klass]*DNA* and [klass]*Rocket* for example) is that when it comes time to build all of the code, you’ll notice that the DNA class we developed earlier remains intact.   The only thing that changes is the array’s data type ([var]*float*, [klass]*PVector*, etc.) and the expression of that data in the phenotype class.   
------------------------------------------------------------------

------------------------------ORIGINAL------------------------------1434
The face’s DNA (genotype) is an array of floating point numbers between 0 and 1, with a single value for each property.
------------------------------CHANGED-------------------------------
The face’s DNA (genotype) is an array of [var]*float*ing point numbers between 0 and 1, with a single value for each property.
------------------------------------------------------------------

