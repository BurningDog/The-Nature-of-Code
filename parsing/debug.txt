00_1_titlepage.asc
-------------------------------
00_2_dedication.asc
-------------------------------
00_3_creditscopyright.asc
-------------------------------
00_4_acknowledgments.asc
-------------------------------
00_5_preface.asc
-------------------------------
00_6_intro.asc
-------------------------------
01_vectors.asc
-------------------------------
02_forces.asc
-------------------------------
03_oscillation.asc
-------------------------------
------------------------------ORIGINAL------------------------------499
|frameCount	|frameCount / period	|TWO_PI * frameCount / period
------------------------------CHANGED-------------------------------
|frameCount	|frameCount / period	|[var]*TWO_PI* * frameCount / period
------------------------------------------------------------------

------------------------------ORIGINAL------------------------------503
|240	|2	|2 * TWO_PI (or 4* PI)
------------------------------CHANGED-------------------------------
|240	|2	|2 * [var]*TWO_PI* (or 4* PI)
------------------------------------------------------------------

------------------------------ORIGINAL------------------------------609
[formula]*period = TWO_PI / angular velocity*
------------------------------CHANGED-------------------------------
[formula]*period = [var]*TWO_PI* / angular velocity*
------------------------------------------------------------------

04_particles.asc
-------------------------------
------------------------------ORIGINAL------------------------------1003
We know a particle has an x location somewhere between 0 and the width of the window.   What if we said: when the particle’s x location is 0, its rotation should be 0; when its x location is equal to the width, its rotation should be equal to TWO_PI?  Does this ring a bell?  Whenever we have a value with one range that we want to map to another range, we can use Processing’s [function]*map()* function!  (See <<intro_section6, Introduction>>.)
------------------------------CHANGED-------------------------------
We know a particle has an x location somewhere between 0 and the width of the window.   What if we said: when the particle’s x location is 0, its rotation should be 0; when its x location is equal to the width, its rotation should be equal to [var]*TWO_PI*?  Does this ring a bell?  Whenever we have a value with one range that we want to map to another range, we can use Processing’s [function]*map()* function!  (See <<intro_section6, Introduction>>.)
------------------------------------------------------------------

05_physicslib.asc
-------------------------------
------------------------------ORIGINAL------------------------------1410
Finally, the ability for a RevoluteJoint to spin can be constrained between two angles. (By default, it can rotate a full 360 degrees, or TWO_PI radians.)
------------------------------CHANGED-------------------------------
Finally, the ability for a RevoluteJoint to spin can be constrained between two angles. (By default, it can rotate a full 360 degrees, or [var]*TWO_PI* radians.)
------------------------------------------------------------------

06_steering.asc
-------------------------------
------------------------------ORIGINAL------------------------------1975
Sure, this is a totally ridiculous code snippet that you would never write.  But it illustrates a certain point.  If you are calculating the sine of pi ten thousand times, why not just calculate it once, save that value, and refer to it whenever necessary?  This is the principle behind sine and cosine lookup tables.   Instead of calling the sine and cosine functions in your code whenever you need them, you can build an array that stores the results of sine and cosine at angles between 0 to TWO_PI and just look up the values when you need them. For example, here are two arrays that store the sine and cosine values for every angle, 0 to 359 degrees.
------------------------------CHANGED-------------------------------
Sure, this is a totally ridiculous code snippet that you would never write.  But it illustrates a certain point.  If you are calculating the sine of pi ten thousand times, why not just calculate it once, save that value, and refer to it whenever necessary?  This is the principle behind sine and cosine lookup tables.   Instead of calling the sine and cosine functions in your code whenever you need them, you can build an array that stores the results of sine and cosine at angles between 0 to [var]*TWO_PI* and just look up the values when you need them. For example, here are two arrays that store the sine and cosine values for every angle, 0 to 359 degrees.
------------------------------------------------------------------

07_ca.asc
-------------------------------
08_fractals.asc
-------------------------------
09_ga.asc
-------------------------------
10_nn.asc
-------------------------------
math.asc
-------------------------------
xx_1_furtherreading.asc
-------------------------------
xx_2_index.asc
-------------------------------
